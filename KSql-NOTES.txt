---------------------------------------------------------------
--- ksql-queries

CREATE STREAM object_movement
(timeStamp BIGINT, trackableObjectId STRING, coordinates STRUCT<latitude DOUBLE, longitude DOUBLE, altitude DOUBLE>, movementType STRING)
WITH (KAFKA_TOPIC = 'object-movement', VALUE_FORMAT = 'JSON');

CREATE STREAM object_coords
  WITH (KAFKA_TOPIC  = 'OBJECT_COORDS',
        PARTITIONS = 1)
AS
SELECT
  timeStamp as ts,
  trackableObjectId as objId,
  coordinates->latitude as lat,
  coordinates->longitude as lon,
  coordinates->altitude as alt
FROM object_movement
WHERE movementType != 'NO_SIGNAL' and movementType != 'STOPPED';



---------------------------------------------------------------
--- docker-compose

  ksql-server:
    image: confluentinc/cp-ksql-server:5.2.1
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      TZ: "Europe/Moscow"
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: ksql_srv
      
  # ksql-cli:
    # image: confluentinc/cp-ksql-cli:5.2.1
    # container_name: ksql-cli
    # environment:
      # TZ: "Europe/Moscow"
    # depends_on:
      # - ksql-server
    # entrypoint:
      # - /bin/bash
      # - -c
      # - |
        # echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
        # while [ $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) -eq 000 ]
        # do
          # echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) " (waiting for 200)"
          # sleep 5
        # done
        # # echo -e "\n\n-> Running KSQL commands\n"
        # # cat /data/scripts/my-ksql-script.sql <(echo 'EXIT')| ksql http://ksql-server:8088
        # echo -e "\n\n-> Sleeping…\n"
        # sleep infinity
